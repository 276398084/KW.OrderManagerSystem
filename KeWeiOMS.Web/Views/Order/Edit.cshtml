@model KeWeiOMS.Domain.OrderType
@{
  
}
<link href="@Url.Content("~/Scripts/uploadify/uploadify.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/uploadify/jquery.uploadify-3.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/kindeditor/kindeditor-min.js")"></script>
<script type="text/javascript">
    $.extend($.fn.datagrid.defaults.editors, {
        combogrid: {
            init: function (container, options) {
                var input = $('<input type="text" class="datagrid-editable-input">').appendTo(container);
                input.combogrid(options);
                return input;
            },
            destroy: function (target) {
                $(target).combogrid('destroy');
            },
            getValue: function (target) {
                return $(target).combogrid('getValue');
            },
            setValue: function (target, value) {
                $(target).combogrid('setValue', value);
            },
            resize: function (target, width) {
                $(target).combogrid('resize', width);
            }
        }
    });
    var editor;
    var editor2;
    var editor3;
    KindEditor.ready(function (K) {
        editor = K.create('#e_BuyerMemo', {
            resizeType: 1,
            allowPreviewEmoticons: false,
            allowImageUpload: false,
            items: [
                'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',
                'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'insertorderedlist',
                'insertunorderedlist', '|', 'emoticons', 'image', 'link'],
            afterBlur: function () { this.sync(); }
        });
        editor2 = K.create('#e_SellerMemo', {
            resizeType: 1,
            allowPreviewEmoticons: false,
            allowImageUpload: false,
            items: [
                'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',
                'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'insertorderedlist',
                'insertunorderedlist', '|', 'emoticons', 'image', 'link'],
            afterBlur: function () { this.sync(); }
        });
        editor3 = K.create('#e_CutOffMemo', {
            resizeType: 1,
            allowPreviewEmoticons: false,
            allowImageUpload: false,
            items: [
                'fontname', 'fontsize', '|', 'forecolor', 'hilitecolor', 'bold', 'italic', 'underline',
                'removeformat', '|', 'justifyleft', 'justifycenter', 'justifyright', 'insertorderedlist',
                'insertunorderedlist', '|', 'emoticons', 'image', 'link'],
            afterBlur: function () { this.sync(); }
        });
    });

    $(function () {
        $('#dg_product').datagrid({
            url: '@Url.Action("List", "OrderProduct")/@ViewData["id"]',
            width: 750,
            height: 200,
            toolbar: [{
                id: 'btnadd',
                text: '添加',
                iconCls: 'icon-add',
                handler: function () {
                    $('#btnsave').linkbutton('enable');
                    addp();
                }
            }, {
                id: 'btndel',
                text: '删除',
                iconCls: 'icon-add',
                handler: function () {
                    $.messager.confirm("提示", "您确定要删除吗？", function (r) {
                        if (r) {
                            if (editIndex == undefined) {
                                return;
                            }
                            $('#dg_product').datagrid('cancelEdit', editIndex)
                                .datagrid('deleteRow', editIndex);
                            editIndex = undefined;
                        }
                    });

                }
            }, {
                id: 'btnsave',
                text: '保存',
                iconCls: 'icon-save',
                handler: function () {
                    accept();
                }
            }],
            onClickRow: onClickRow
        });

        $('#e_CurrencyCode').combogrid({
            panelWidth: 360,
            idField: 'CurrencyCode',
            textField: 'CurrencyCode',
            url: '/Currency/QList',
            fit: true,
            columns: [[
                { field: 'CurrencyName', title: '货币', width: 150 },
                { field: 'CurrencyCode', title: '代码', width: 100 },
                { field: 'CurrencyValue', title: '汇率', width: 100 }
            ]]
        });

        $('#e_LogisticMode').combogrid({
            panelWidth: 360,
            idField: 'LogisticsCode',
            textField: 'LogisticsName',
            url: '/LogisticsMode/ALLList',
            fit: true,
            columns: [[
                { field: 'LogisticsName', title: '名称', width: 250 },
                { field: 'LogisticsCode', title: '代码', width: 100 }
            ]]
        });


        $('#dg_record').datagrid({
            url: '@Url.Action("Record","Order")/@ViewData["id"]',
            width: 1250,
            height: 240
            })
    });

    function changeCountry(v) {
        $('#e_Country').combogrid({
            panelWidth: 360,
            idField: 'ECountry',
            textField: 'ECountry',
            url: '/Country/ListALL',
            fit: true,
            columns: [[
                { field: 'CCountry', title: '中文', width: 150 },
                { field: 'ECountry', title: '英文', width: 100 },
                { field: 'CountryCode', title: '简码', width: 100 }
            ]]

        });
        $('#btn').unbind("focus");
        $('#e_Country').combogrid('setValue', v);
    }
    var editIndex = undefined;
    var editIndex1 = undefined;
    function endEditing() {
        if (editIndex == undefined) {
            return true;
        }
        if ($('#dg_product').datagrid('validateRow', editIndex)) {

            $('#dg_product').datagrid('endEdit', editIndex);
            editIndex = undefined;
            return true;
        } else {
            return false;
        }
    }

    function onClickRow(index) {
        if (editIndex != index) {
            if (endEditing()) {
                $('#dg_product').datagrid('selectRow', index)
                    .datagrid('beginEdit', index);
                editIndex = index;
            } else {
                $('#dg_product').datagrid('selectRow', editIndex);
            }
        }
    }
    function onClickRow1(index) {
        if (editIndex1 != index) {
            if (endEditing1()) {
                $('#dg_p').datagrid('selectRow', index)
                    .datagrid('beginEdit', index);
                editIndex1 = index;
            } else {
                $('#dg_p').datagrid('selectRow', editIndex1);
            }
        }
    }
    function endEditing1() {
        if (editIndex1 == undefined) {
            return true;
        }
        if ($('#dg_p').datagrid('validateRow', editIndex1)) {
            var t1 = $('#dg_p').datagrid('getRows')[editIndex1]['Qty'];
            var t2 = $('#dg_p').datagrid('getEditor', { index: editIndex1, field: 'Qty' }).target.numberbox("getValue");
            if (t1 < t2) {
                alert("数量不能大于原来的数量:");
                return false;
            }
            $('#dg_p').datagrid('endEdit', editIndex1);
            editIndex1 = undefined;
            return true;
        } else {
            return false;
        }
    }

    function addp() {
        if (endEditing()) {
            $('#dg_product').datagrid('appendRow', { Qty: 1, Price: 0 });
            editIndex = $('#dg_product').datagrid('getRows').length - 1;
            $('#dg_product').datagrid('selectRow', editIndex)
                .datagrid('beginEdit', editIndex);
        }
    }

    function accept() {
        if (endEditing()) {
            $('#dg_product').datagrid('acceptChanges');
        }
    }

    function addOrder() {
        var effectRow = new Object();
        if (endEditing()) {
            $('#dg_product').datagrid('acceptChanges');
        }
        effectRow["rows"] = JSON.stringify($('#dg_product').datagrid("getRows"));
        $("#rows").val(JSON.stringify($('#dg_product').datagrid("getRows")));

        formPost('e_form', '@Url.Action("Edit", "Order")');
    }
    function splitOrder(x) {

        if (x == 0) {
            if ("@Model.Status" == "已处理") {
                showProduct("缺货拆分--选择产品", function () {
                    if (endEditing1()) {
                        var effectRow = new Object();
                        effectRow["o"] = '@ViewData["id"]';
                        effectRow["rows"] = JSON.stringify($('#dg_p').datagrid("getSelections"));
                        $.post("/Order/SplitOrder/", effectRow, function (rsp) {
                            $('#dlg').dialog('close');
                            if (rsp.IsSuccess) {
                                alert("提交成功！");
                            }
                        }, "JSON").error(function () {
                            alert("提交错误！");

                        });
                    }
                });
            } else {
                alert("只有未配货的的订单才能缺货拆包");
            }
        } else {
            if ("@Model.Status" == "待包装") {
                $.messager.prompt('发货拆分--输入分包数量', '请输入还需要发货的包裹的数值', function (r) {
                    if (r) {
                        var effectRow = new Object();
                        effectRow["o"] = '@ViewData["id"]';
                        effectRow["c"] = r;
                        $.post("/Order/SplitSendOrder/", effectRow, function (rsp) {

                            if (rsp.IsSuccess) {
                                alert("提交成功！");
                            }
                        }, "JSON").error(function () {
                            alert("提交错误！");

                        });
                    }
                });
            } else {
                alert("只有待包装的订单才能发货拆包");
            }
        }
    }

    function reOrder() {
        $('#dg_p').datagrid({ closed: false });
        showProduct("重发", function () {
            if (endEditing1()) {
                var effectRow = new Object();
                effectRow["o"] = '@ViewData["id"]';
                effectRow["rows"] = JSON.stringify($('#dg_p').datagrid("getSelections"));
                $.post("/Order/ReOrder/", effectRow, function (rsp) {
                    $('#dlg').dialog('close');
                    if (rsp.IsSuccess) {
                        alert("提交成功！");

                    }
                }, "JSON").error(function () {
                    alert("提交错误！");
                });
            }
        });
    }

    function showProduct(title, handle) {
        $('#dg_p').datagrid({
            url: '@Url.Action("List", "OrderProduct")/@ViewData["id"]',
            width: 700,
            onClickRow: onClickRow1
        });
        $('#dlg').dialog({
            width:750,
            title: title,
            modal: true,
            loadingMessage: '正在加载...',
            buttons: [{
                text: '提交',
                iconCls: 'icon-ok',
                handler: handle
            }, {
                text: '取消',
                handler: function () {
                    $('#dlg').dialog('close');
                }
            }]
        }).dialog('open');
    }

    function skuSelect(r) {

        var ed = $('#dg_product').datagrid('getEditor', { index: editIndex, field: 'SKU' });

        var p = $(ed.target).combogrid('grid').datagrid("getRows")[r].Standard;

        if (editIndex != undefined)
            ed = $('#dg_product').datagrid('getEditor', { index: editIndex, field: 'Standard' });

        $(ed.target).val(p);
    }


</script>


@using (Html.BeginForm("Create", "Order", FormMethod.Post, new { id = "e_form" }))
{
    <a href="#" class="easyui-linkbutton" onclick="addOrder();">保存</a>  
    <a href="#" class="easyui-linkbutton" onclick="splitOrder(0);">缺货拆分</a>  
    <a href="#" class="easyui-linkbutton" onclick="splitOrder(1);">发货拆分</a>  
    <a href="#" class="easyui-linkbutton" onclick="reOrder();">重发</a>  
    
    <fieldset>
        <legend>订单信息</legend>
        <table class="editForm" style="height: 150px">
            <tr>
                <td>
                    @Html.LabelFor(model => model.OrderNo, "订单编号:")
                    <input type="hidden" id="rows" name="rows" />
                </td>
                <td>
                    @Html.TextBoxFor(model => model.OrderNo, new { @id = "e_OrderNo" })
                    @Html.HiddenFor(model => model.Id, new { @id = "e_Id" })
                    @Html.HiddenFor(model => model.IsMerger)
                    @Html.HiddenFor(model => model.IsOutOfStock)
                    @Html.HiddenFor(model => model.IsPrint)
                    @Html.HiddenFor(model => model.IsError)
                    @Html.HiddenFor(model => model.IsRepeat)
                    @Html.HiddenFor(model => model.IsSplit)
                    @Html.HiddenFor(model => model.Platform)
                    @Html.HiddenFor(model => model.Account)
                    @Html.HiddenFor(model => model.ScanningOn)
                    @Html.HiddenFor(model => model.ScanningBy)
                    @Html.HiddenFor(model => model.GenerateOn)
                    @Html.HiddenFor(model => model.Freight)
                    @Html.HiddenFor(model => model.Weight)
                    @Html.HiddenFor(model => model.CreateOn)
                    @Html.HiddenFor(model => model.Status)
                    @Html.HiddenFor(model => model.MId)
                    @Html.HiddenFor(model => model.RMB)
                </td>
                <td>
                    @Html.LabelFor(model => model.OrderExNo, "外部编号:")
                </td>
                <td>
                    @Html.TextBoxFor(model => model.OrderExNo, new { @id = "e_OrderExNo" })
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.Amount, "总金额:")
                </td>
                <td>
                    @Html.TextBoxFor(model => model.CurrencyCode, new { @id = "e_CurrencyCode" })<br />
                    @Html.TextBoxFor(model => model.Amount, new { @id = "e_Amount" })
                </td>
                <td>
                    @Html.LabelFor(model => model.TId, "流水交易号:")
                </td>
                <td>
                    @Html.TextBoxFor(model => model.TId, new { @id = "e_TId" })
                </td>
            </tr>

            <tr>
                <td>
                    @Html.LabelFor(model => model.BuyerName, "买家:")
                </td>
                <td>
                    @Html.TextBoxFor(model => model.BuyerName, new { @id = "e_BuyerName" })
                </td>
                <td>
                    @Html.LabelFor(model => model.BuyerEmail, "买家邮箱:")
                </td>
                <td>
                    @Html.TextBoxFor(model => model.BuyerEmail, new { @id = "e_BuyerEmail" })
                    @Html.HiddenFor(model => model.BuyerId, new { @id = "e_BuyerId" })
                </td>
            </tr>
        </table>
    </fieldset>
    <div id="tt" class="easyui-tabs" style="width: 1350px; height: 300px;">
        <div title="产品信息" style="padding: 20px;">
            <table id="dg_product" class="easyui-datagrid" rownumbers="true" singleselect="true">
                <thead>
                    <tr>
                        <th field="ExSKU" width="80" data-options="editor:'text'">ExSKU
                        </th>
                        <th field="Title" width="100" data-options="editor:'text'">名称
                        </th>
                        <th field="SKU" width="80" data-options="
                        editor:{
							type:'combogrid',
							options:{
								panelWidth:410,
                                mode: 'remote',
                                idField: 'SKU',
                                textField: 'SKU',
                                required:true,
                                url: '/Product/ListQ',
                                fit: true,
                                onSelect:skuSelect,
                                columns: [[
                                    { field: 'SKU', title: 'SKU', width: 100 },
                                    { field: 'ProductName', title: 'Title', width: 200 },
                                    { field: 'Standard', title: '规格', width: 100 }

                                ]]
							}
						}
                        ">SKU
                        </th>
                        <th field="Qty" width="80" data-options="editor:{ type: 'numberbox'}">数量
                        </th>
                        <th field="Standard" width="80" data-options="editor:'text'">规格
                        </th>
                        <th field="Remark" width="100" data-options="editor:'text'">描述
                        </th>
                        <th field="Price" width="80" data-options="editor:{ type: 'numberbox', options: { precision: 5 }}">
                        价格

                    <th field="Url" width="100" data-options="editor:'text'">网址
                    </th>
                    </tr>
                </thead>
            </table>
        </div>
        <div title="地址信息" style="overflow: auto; padding: 20px;">
            <table class="editForm">
                <tr>
                    <td>
                        @Html.LabelFor(model => model.LogisticMode, "发货方式:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.LogisticMode, new { @id = "e_LogisticMode" })
                    </td>
                    <td></td>
                    <td>


                        @Html.HiddenFor(model => model.AddressId, new { @id = "e_AddressId" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.Addressee, "收件人:")
                    </td>
                    <td>
                        @Html.HiddenFor(model => model.AddressInfo.Id)
                        @Html.TextBoxFor(model => model.AddressInfo.Addressee, new { @id = "e_Addressee" })
                    </td>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.PostCode, "邮编:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.AddressInfo.PostCode, new { @id = "e_PostCode" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.Tel, "电话:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.AddressInfo.Tel, new { @id = "e_Tel" })
                    </td>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.Phone, "手机:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.AddressInfo.Phone, new { @id = "e_Phone" })
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.Street, "街道:")
                    </td>
                    <td colspan="3">
                        @Html.TextBoxFor(model => model.AddressInfo.Street, new { @id = "e_Street" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.County, "区:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.AddressInfo.County, new { @id = "e_County" })
                    </td>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.City, "市:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.AddressInfo.City, new { @id = "e_City" })
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.Province, "省:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.AddressInfo.Province, new { @id = "e_Province" })
                    </td>
                    <td>
                        @Html.LabelFor(model => model.AddressInfo.Country, "国家:")
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.AddressInfo.Country, new { @id = "e_Country", @onfocus = "changeCountry(this.value);" })
                        @Html.HiddenFor(model => model.AddressInfo.CountryCode, new { @id = "e_CountryCode" })
                    </td>
                </tr>
            </table>
        </div>
        <div title="留言信息" style="padding: 20px;">
            <table class="editForm">
                <tr>
                    <td>
                        @Html.LabelFor(model => model.BuyerMemo, "买家留言:")
                    </td>
                    <td>
                        @Html.TextAreaFor(model => model.BuyerMemo, new { @id = "e_BuyerMemo", @style = "width:600px;resize:none" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(model => model.SellerMemo, "商家留言:")
                    </td>
                    <td>
                        @Html.TextAreaFor(model => model.SellerMemo, new { @id = "e_SellerMemo", @style = "width:600px;resize:none" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(model => model.CutOffMemo, "包裹截留留言:")
                    </td>
                    <td>
                        @Html.TextAreaFor(model => model.CutOffMemo, new { @id = "e_CutOffMemo", @style = "width:600px;resize:none" })
                    </td>
                </tr>
            </table>
        </div>
                <div title="订单日志" style="padding:20px;">  
        <table id="dg_record" class="easyui-datagrid" rownumbers="true" singleselect="true" >
            <thead>
                <tr>
                    <th field="RecordType" width="150" >类型
                    </th>
                    <th field="Content" width="800">内容
                    </th>
                    <th field="CreateBy" width="60">处理人
                    </th>
                    <th field="CreateOn" width="200" formatter="getDate">处理时间
                    </th>
                </tr>
            </thead>
        </table>
  
</div>

    </div>
}

<div id="dlg"  class="easyui-dialog" closed="true" >
    <table id="dg_p" class="easyui-datagrid" rownumbers="true">
        <thead>
            <tr>
                <th data-options="field:'Id',checkbox:true"></th>
                <th field="ExSKU" width="80">ExSKU
                </th>
                <th field="Title" width="100">名称
                </th>
                <th field="SKU" width="80">SKU
                </th>
                <th field="Qty" width="80" data-options="editor:{ type: 'numberbox'}">数量
                </th>
                <th field="Remark" width="100">描述
                </th>
            </tr>
        </thead>
    </table>
</div>

